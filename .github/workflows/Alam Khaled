# Deployment 050376 instructions:
#
# 1) Create new Azure service principal (SP):
#    `az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/$SUBSCRIPTION_ID"
#
# 2) In your github project create a new secret named AZURE_CREDENTIALS and paste
#    the json object output from previous command
#
# 3) Optional: name your app. See AZURE_WEBAPP_NAME
# 4) Commit and push

name: release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  packages: write

env:
  AZURE_WEBAPP_NAME: '${{ github.repository_owner }}-${{ github.run_id }}'    # The name of your Azure Web App. Should be unique.
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # https://docs.github.com/en/actions/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    defaults:
      run:
        shell: bash
        working-directory: src
    outputs:
      is_AZURE_CREDENTIALS_set: ${{ steps.checksecret.outputs.is_AZURE_CREDENTIALS_set }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v3
        with:
          context: ./src
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: List image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker image ls ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Check secret set
        id: checksecret
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "is_AZURE_CREDENTIALS_set=${{ env.AZURE_CREDENTIALS != '' }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    if: needs.checksecret.outputs.is_AZURE_CREDENTIALS_set == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: none
      packages: read
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Azure CLI script to provision a new Web App for Container'
        run: |
          az account show
          ./infra/setup.sh | \
          LOCATION_NAME=westeurope \
          RESOURCE_GROUP_NAME=rg-${{ env.AZURE_WEBAPP_NAME }} \
          WEB_APP_NAME=${{ env.AZURE_WEBAPP_NAME }} \
          IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'

      - name: Deploy summary
        run: |
          echo "### https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net :rocket:" >> $GITHUB_STEP_SUMMARY

# Example release pipeline trigger:
#
# TAG="v0.0.1"
# git tag "$TAG" -m "Release version: $TAG"
# git push origin --tags
